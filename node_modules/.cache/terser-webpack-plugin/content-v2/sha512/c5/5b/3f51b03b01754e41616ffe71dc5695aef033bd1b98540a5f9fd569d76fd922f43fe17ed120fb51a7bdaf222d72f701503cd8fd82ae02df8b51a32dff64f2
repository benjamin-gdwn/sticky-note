{"map":"{\"version\":3,\"sources\":[\"/Users/bengoodwin/Desktop/sticky-notes-react-build/src/Header.js\",\"/Users/bengoodwin/Desktop/sticky-notes-react-build/src/Note.js\",\"/Users/bengoodwin/Desktop/sticky-notes-react-build/src/NotesList.js\",\"/Users/bengoodwin/Desktop/sticky-notes-react-build/src/App.js\",\"/Users/bengoodwin/Desktop/sticky-notes-react-build/src/index.js\"],\"names\":[\"Header\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"onClick\",\"addNote\",\"type\",\"placeholder\",\"value\",\"searchText\",\"onChange\",\"e\",\"onSearch\",\"target\",\"Note\",\"note\",\"title\",\"updatedValue\",\"editMeId\",\"id\",\"onType\",\"description\",\"removeNote\",\"NoteList\",\"noteElements\",\"notes\",\"filter\",\"doesMatchSearch\",\"map\",\"src_Note\",\"key\",\"App\",\"state\",\"Date\",\"now\",\"newNote\",\"_this\",\"setState\",\"concat\",\"Object\",\"toConsumableArray\",\"editId\",\"updatedKey\",\"updateValue\",\"updatedNotes\",\"text\",\"newSearchText\",\"toLowerCase\",\"noteObjects\",\"lowerCaseTitle\",\"lowerCaseDescription\",\"titleMatch\",\"includes\",\"descriptionMatch\",\"hasMatch\",\"noteId\",\"stringifyNotes\",\"JSON\",\"stringify\",\"this\",\"localStorage\",\"setItem\",\"stringifiedNotes\",\"getItem\",\"savedNotes\",\"parse\",\"src_Header\",\"NotesList\",\"Component\",\"rootElement\",\"document\",\"getElementById\",\"ReactDOM\",\"render\",\"src_App\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from \\\"react\\\";\\n// pass props to the header so we can set the value of the search bar\\nconst Header = (props) => {\\n  // function created to store the input value\\n  const callSearch = (e) => {\\n    // using props to call the function passed down from app.js\\n    props.onSearch(e.target.value);\\n  };\\n  return (\\n    <header className=\\\"app-header\\\">\\n      <h1 className=\\\"app-header__title\\\">Super Sticky Notes</h1>\\n      <aside className=\\\"app-header__controls\\\">\\n        {/* pass the addnote function from app.js */}\\n        <button className=\\\"add-new\\\" onClick={props.addNote}>\\n          + New Note\\n        </button>\\n        <input\\n          className=\\\"search\\\"\\n          type=\\\"text\\\"\\n          placeholder=\\\"Type here to search...\\\"\\n          // set the value to props.searchText which is a state set up in APP.JS\\n          value={props.searchText}\\n          // pass the callSearch function above which uses the onsearch function from app.js\\n          onChange={callSearch}\\n        />\\n      </aside>\\n    </header>\\n  );\\n};\\n\\nexport default Header;\\n\",\"import React from \\\"react\\\";\\n\\n// set up the note with props\\nconst Note = (props) => {\\n  // create two identical functions one for title one for description\\n  const updateTitle = (e) => {\\n    // store the target value\\n    const updatedValue = e.target.value;\\n    // store the note id\\n    const editMeId = props.note.id;\\n    // using the onType method from app.js give it the target value, the title and the edited note id\\n    props.onType(editMeId, \\\"title\\\", updatedValue);\\n  };\\n\\n  const updateDescription = (e) => {\\n    const updatedValue = e.target.value;\\n    const editMeId = props.note.id;\\n    props.onType(editMeId, \\\"description\\\", updatedValue);\\n  };\\n  // function to delete notes\\n  const clickDelete = () => {\\n    // call the function that was created in app.js and passed down to notelist and note.js\\n    props.removeNote(props.note.id);\\n  };\\n\\n  return (\\n    <li className=\\\"note\\\">\\n      {/* set the value of the title as the props title */}\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Title\\\"\\n        className=\\\"note__title\\\"\\n        value={props.note.title}\\n        onChange={updateTitle}\\n      />\\n      {/* set the value of the description of the note as the props description */}\\n      <textarea\\n        placeholder=\\\"Description...\\\"\\n        className=\\\"note__description\\\"\\n        value={props.note.description}\\n        onChange={updateDescription}\\n      />\\n      <span className=\\\"note__delete\\\" onClick={clickDelete}>\\n        X\\n      </span>\\n    </li>\\n  );\\n};\\n\\nexport default Note;\\n\",\"import React from \\\"react\\\";\\nimport Note from \\\"./Note.js\\\";\\n\\n// display the list of notes\\nconst NoteList = (props) => {\\n  // setting up a function using the boolean value doesMatchSearch\\n  const findSearch = (note) => note.doesMatchSearch;\\n  // filtering that value\\n  const searchMatches = props.notes.filter(findSearch);\\n  // function that will display the notes based on note and id\\n  const renderNote = (note) => (\\n    // pass the ontype method from app all the way down to notes\\n    <Note\\n      removeNote={props.removeNote}\\n      onType={props.onType}\\n      note={note}\\n      key={note.id}\\n    />\\n  );\\n  // map through those notes to find those that match\\n  const noteElements = searchMatches.map(renderNote);\\n  // display those notes\\n  return <ul className=\\\"notes-list\\\">{noteElements}</ul>;\\n};\\n\\nexport default NoteList;\\n\",\"import React, { Component } from \\\"react\\\";\\nimport Header from \\\"./Header.js\\\";\\nimport NoteList from \\\"./NotesList\\\";\\n// component so we can set the state\\nclass App extends Component {\\n  // state set are searchText (referenced in header) and notes (referenced in note and notelist.js)\\n  state = {\\n    searchText: \\\"search for notes...\\\",\\n    notes: [\\n      {\\n        id: Date.now(),\\n        title: \\\"\\\",\\n        description: \\\"\\\",\\n        doesMatchSearch: true\\n      }\\n    ]\\n  };\\n  // add a method to add a new note\\n  addNote = () => {\\n    // add a new note\\n    const newNote = {\\n      id: Date.now(),\\n      title: \\\"\\\",\\n      description: \\\"\\\",\\n      doesMatchSearch: true\\n    };\\n    // add new note to existing notes array\\n    // can also do as such\\n    // const newNotes = [newNote, ...this.state.notes];\\n    // this.setState({ notes: newNotes})\\n    // below is shorter step\\n    this.setState({ notes: [newNote, ...this.state.notes] });\\n  };\\n\\n  // method to add text to our notes\\n  onType = (editId, updatedKey, updateValue) => {\\n    // editId is id of the note that is edited\\n    // updatedKey is the title or description field\\n    // updatedValue is the value of what was updated\\n\\n    // map over the array of notes\\n    const updatedNotes = this.state.notes.map((note) => {\\n      // if the note id isnt the edited note then return it as it was\\n      if (note.id !== editId) {\\n        return note;\\n        // otherwise\\n      } else {\\n        // if the title was updated\\n        if (updatedKey === \\\"title\\\") {\\n          // make the note.title the updateValue\\n          note.title = updateValue;\\n          // and return it\\n          return note;\\n          // otherwise\\n        } else {\\n          // update the value of the note.description\\n          note.description = updateValue;\\n          // and return the note\\n          return note;\\n        }\\n      }\\n    });\\n    // then.... set the state to the updated notes\\n    this.setState({ notes: updatedNotes });\\n  };\\n\\n  // method to map over notes array for each note object\\n  onSearch = (text) => {\\n    // variable to store search text as lower case\\n    const newSearchText = text.toLowerCase();\\n    // function to map through all notes\\n    const noteObjects = this.state.notes.map((note) => {\\n      //  if there isnt any search text\\n      if (!newSearchText) {\\n        // then all notes return true and display them\\n        note.doesMatchSearch = true;\\n        return note;\\n        // otherwise\\n      } else {\\n        // store both title and description as lower case\\n        const lowerCaseTitle = note.title.toLowerCase();\\n        const lowerCaseDescription = note.description.toLowerCase();\\n        // variables to store if the title and description include the search text\\n        const titleMatch = lowerCaseTitle.includes(newSearchText);\\n        const descriptionMatch = lowerCaseDescription.includes(newSearchText);\\n        // variable to store if either title or description match search text\\n        const hasMatch = titleMatch || descriptionMatch;\\n        // if there is a match of search text and either title or description then display note\\n        note.doesMatchSearch = hasMatch;\\n        return note;\\n      }\\n    });\\n    // then set the state to\\n    this.setState({\\n      // the notes that match and the text that matches\\n      notes: noteObjects,\\n      searchText: newSearchText\\n    });\\n  };\\n  // function to remove notes once x is clicked\\n  removeNote = (noteId) => {\\n    // filtering through the notes and returning them as long as the noteId does not match the id of the note passed back to us\\n    const updatedNotes = this.state.notes.filter((note) => note.id !== noteId);\\n    // set the state of notes as this\\n    this.setState({ notes: updatedNotes });\\n  };\\n  // save the notes to local storage\\n  componentDidUpdate() {\\n    // variable to save stringified notes\\n    const stringifyNotes = JSON.stringify(this.state.notes);\\n    // send it to the local storage and name it\\n    localStorage.setItem(\\\"savedNotes\\\", stringifyNotes);\\n  }\\n  // when the app reloads\\n  componentDidMount() {\\n    // store the get the notes from local storage\\n    const stringifiedNotes = localStorage.getItem(\\\"savedNotes\\\");\\n    // if there are notes saved on local storage\\n    if (stringifiedNotes) {\\n      // take those notes back into jsx\\n      const savedNotes = JSON.parse(stringifiedNotes);\\n      // then set the state of notes to what was saved\\n      this.setState({ notes: savedNotes });\\n    }\\n  }\\n  render() {\\n    return (\\n      <div>\\n        {/* render the component and pass the state set above to the component */}\\n        {/* passing the addnote function to the header component so i can call the function onClick to the button */}\\n        <Header\\n          onSearch={this.onSearch}\\n          addNote={this.addNote}\\n          searchText={this.state.searchText}\\n        />\\n        {/* render the component and pass the state set above to component */}\\n        <NoteList\\n          removeNote={this.removeNote}\\n          onType={this.onType}\\n          notes={this.state.notes}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport App from \\\"./App.js\\\";\\nimport \\\"./index.css\\\";\\n\\nconst rootElement = document.getElementById(\\\"root\\\");\\nReactDOM.render(<App />, rootElement);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{15:function(e,t){throw new Error(\"Module build failed (from ./node_modules/mini-css-extract-plugin/dist/loader.js):\\nModuleBuildError: Module build failed (from ./node_modules/postcss-loader/src/index.js):\\nSyntaxError\\n\\n(159:1) Unclosed block\\n\\n \\x1b[90m 157 | \\x1b[39m  font-size\\x1b[33m:\\x1b[39m 22px\\x1b[33m;\\x1b[39m\\n \\x1b[90m 158 | \\x1b[39m\\x1b[33m}\\x1b[39m\\n\\x1b[31m\\x1b[1m>\\x1b[22m\\x1b[39m\\x1b[90m 159 | \\x1b[39m\\x1b[36m@keyframes\\x1b[39m gradient \\x1b[33m{\\x1b[39m\\n \\x1b[90m     | \\x1b[39m\\x1b[31m\\x1b[1m^\\x1b[22m\\x1b[39m\\n \\x1b[90m 160 | \\x1b[39m  0% \\x1b[33m{\\x1b[39m\\n \\x1b[90m 161 | \\x1b[39m    background-position\\x1b[33m:\\x1b[39m 0% 50%\\x1b[33m;\\x1b[39m\\n\\n    at /Users/bengoodwin/Desktop/sticky-notes-react-build/node_modules/webpack/lib/NormalModule.js:301:20\\n    at /Users/bengoodwin/Desktop/sticky-notes-react-build/node_modules/loader-runner/lib/LoaderRunner.js:367:11\\n    at /Users/bengoodwin/Desktop/sticky-notes-react-build/node_modules/loader-runner/lib/LoaderRunner.js:233:18\\n    at context.callback (/Users/bengoodwin/Desktop/sticky-notes-react-build/node_modules/loader-runner/lib/LoaderRunner.js:111:13)\\n    at /Users/bengoodwin/Desktop/sticky-notes-react-build/node_modules/postcss-loader/src/index.js:207:9\")},16:function(e,t,n){\"use strict\";n.r(t);var o=n(0),a=n.n(o),r=n(2),s=n.n(r),c=n(6),i=n(3),l=n(4),d=n(7),m=n(5),u=n(8),p=function(e){return a.a.createElement(\"header\",{className:\"app-header\"},a.a.createElement(\"h1\",{className:\"app-header__title\"},\"Super Sticky Notes\"),a.a.createElement(\"aside\",{className:\"app-header__controls\"},a.a.createElement(\"button\",{className:\"add-new\",onClick:e.addNote},\"+ New Note\"),a.a.createElement(\"input\",{className:\"search\",type:\"text\",placeholder:\"Type here to search...\",value:e.searchText,onChange:function(t){e.onSearch(t.target.value)}})))},h=function(e){return a.a.createElement(\"li\",{className:\"note\"},a.a.createElement(\"input\",{type:\"text\",placeholder:\"Title\",className:\"note__title\",value:e.note.title,onChange:function(t){var n=t.target.value,o=e.note.id;e.onType(o,\"title\",n)}}),a.a.createElement(\"textarea\",{placeholder:\"Description...\",className:\"note__description\",value:e.note.description,onChange:function(t){var n=t.target.value,o=e.note.id;e.onType(o,\"description\",n)}}),a.a.createElement(\"span\",{className:\"note__delete\",onClick:function(){e.removeNote(e.note.id)}},\"X\"))},f=function(e){var t=e.notes.filter(function(e){return e.doesMatchSearch}).map(function(t){return a.a.createElement(h,{removeNote:e.removeNote,onType:e.onType,note:t,key:t.id})});return a.a.createElement(\"ul\",{className:\"notes-list\"},t)},v=function(e){function t(){var e,n;Object(i.a)(this,t);for(var o=arguments.length,a=new Array(o),r=0;r<o;r++)a[r]=arguments[r];return(n=Object(d.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(a)))).state={searchText:\"search for notes...\",notes:[{id:Date.now(),title:\"\",description:\"\",doesMatchSearch:!0}]},n.addNote=function(){var e={id:Date.now(),title:\"\",description:\"\",doesMatchSearch:!0};n.setState({notes:[e].concat(Object(c.a)(n.state.notes))})},n.onType=function(e,t,o){var a=n.state.notes.map(function(n){return n.id!==e?n:\"title\"===t?(n.title=o,n):(n.description=o,n)});n.setState({notes:a})},n.onSearch=function(e){var t=e.toLowerCase(),o=n.state.notes.map(function(e){if(t){var n=e.title.toLowerCase(),o=e.description.toLowerCase(),a=n.includes(t),r=o.includes(t),s=a||r;return e.doesMatchSearch=s,e}return e.doesMatchSearch=!0,e});n.setState({notes:o,searchText:t})},n.removeNote=function(e){var t=n.state.notes.filter(function(t){return t.id!==e});n.setState({notes:t})},n}return Object(u.a)(t,e),Object(l.a)(t,[{key:\"componentDidUpdate\",value:function(){var e=JSON.stringify(this.state.notes);localStorage.setItem(\"savedNotes\",e)}},{key:\"componentDidMount\",value:function(){var e=localStorage.getItem(\"savedNotes\");if(e){var t=JSON.parse(e);this.setState({notes:t})}}},{key:\"render\",value:function(){return a.a.createElement(\"div\",null,a.a.createElement(p,{onSearch:this.onSearch,addNote:this.addNote,searchText:this.state.searchText}),a.a.createElement(f,{removeNote:this.removeNote,onType:this.onType,notes:this.state.notes}))}}]),t}(o.Component),b=(n(15),document.getElementById(\"root\"));s.a.render(a.a.createElement(v,null),b)},9:function(e,t,n){e.exports=n(16)}},[[9,1,2]]]);","extractedComments":[]}